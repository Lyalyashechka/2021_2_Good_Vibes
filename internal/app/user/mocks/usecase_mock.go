// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_2_Good_Vibes/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUsecase) AddUser(newUser models.UserDataForReg) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", newUser)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUsecaseMockRecorder) AddUser(newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUsecase)(nil).AddUser), newUser)
}

// CheckPassword mocks base method.
func (m *MockUsecase) CheckPassword(user models.UserDataForInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockUsecaseMockRecorder) CheckPassword(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockUsecase)(nil).CheckPassword), user)
}

// GenerateAvatarName mocks base method.
func (m *MockUsecase) GenerateAvatarName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAvatarName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateAvatarName indicates an expected call of GenerateAvatarName.
func (mr *MockUsecaseMockRecorder) GenerateAvatarName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAvatarName", reflect.TypeOf((*MockUsecase)(nil).GenerateAvatarName))
}

// GetUserDataByID mocks base method.
func (m *MockUsecase) GetUserDataByID(id uint64) (*models.UserDataProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataByID", id)
	ret0, _ := ret[0].(*models.UserDataProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataByID indicates an expected call of GetUserDataByID.
func (mr *MockUsecaseMockRecorder) GetUserDataByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataByID", reflect.TypeOf((*MockUsecase)(nil).GetUserDataByID), id)
}

// SaveAvatarName mocks base method.
func (m *MockUsecase) SaveAvatarName(userId int, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAvatarName", userId, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAvatarName indicates an expected call of SaveAvatarName.
func (mr *MockUsecaseMockRecorder) SaveAvatarName(userId, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAvatarName", reflect.TypeOf((*MockUsecase)(nil).SaveAvatarName), userId, fileName)
}

// UpdatePassword mocks base method.
func (m *MockUsecase) UpdatePassword(newData models.UserDataPassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", newData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUsecaseMockRecorder) UpdatePassword(newData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUsecase)(nil).UpdatePassword), newData)
}

// UpdateProfile mocks base method.
func (m *MockUsecase) UpdateProfile(newData models.UserDataProfile) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", newData)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUsecaseMockRecorder) UpdateProfile(newData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUsecase)(nil).UpdateProfile), newData)
}
