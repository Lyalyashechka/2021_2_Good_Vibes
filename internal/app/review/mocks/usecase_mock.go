// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_review is a generated GoMock package.
package mock_review

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_2_Good_Vibes/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AddReview mocks base method.
func (m *MockUseCase) AddReview(review models.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", review)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReview indicates an expected call of AddReview.
func (mr *MockUseCaseMockRecorder) AddReview(review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockUseCase)(nil).AddReview), review)
}

// DeleteReview mocks base method.
func (m *MockUseCase) DeleteReview(userId, productId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", userId, productId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview.
func (mr *MockUseCaseMockRecorder) DeleteReview(userId, productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockUseCase)(nil).DeleteReview), userId, productId)
}

// GetReviewsByProductId mocks base method.
func (m *MockUseCase) GetReviewsByProductId(productId int) ([]models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByProductId", productId)
	ret0, _ := ret[0].([]models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByProductId indicates an expected call of GetReviewsByProductId.
func (mr *MockUseCaseMockRecorder) GetReviewsByProductId(productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByProductId", reflect.TypeOf((*MockUseCase)(nil).GetReviewsByProductId), productId)
}

// GetReviewsByUser mocks base method.
func (m *MockUseCase) GetReviewsByUser(userName string) ([]models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByUser", userName)
	ret0, _ := ret[0].([]models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByUser indicates an expected call of GetReviewsByUser.
func (mr *MockUseCaseMockRecorder) GetReviewsByUser(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByUser", reflect.TypeOf((*MockUseCase)(nil).GetReviewsByUser), userName)
}

// UpdateReview mocks base method.
func (m *MockUseCase) UpdateReview(review models.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", review)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockUseCaseMockRecorder) UpdateReview(review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockUseCase)(nil).UpdateReview), review)
}
