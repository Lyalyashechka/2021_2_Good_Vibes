// Code generated by MockGen. DO NOT EDIT.
// Source: basket_grpc.pb.go

// Package mock_basket is a generated GoMock package.
package mock_basket

import (
	context "context"
	reflect "reflect"

	basket "github.com/go-park-mail-ru/2021_2_Good_Vibes/internal/app/tools/proto/basket"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
)

// MockBasketServiceClient is a mock of BasketServiceClient interface.
type MockBasketServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBasketServiceClientMockRecorder
}

// MockBasketServiceClientMockRecorder is the mock recorder for MockBasketServiceClient.
type MockBasketServiceClientMockRecorder struct {
	mock *MockBasketServiceClient
}

// NewMockBasketServiceClient creates a new mock instance.
func NewMockBasketServiceClient(ctrl *gomock.Controller) *MockBasketServiceClient {
	mock := &MockBasketServiceClient{ctrl: ctrl}
	mock.recorder = &MockBasketServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasketServiceClient) EXPECT() *MockBasketServiceClientMockRecorder {
	return m.recorder
}

// DeleteProduct mocks base method.
func (m *MockBasketServiceClient) DeleteProduct(ctx context.Context, in *basket.BasketProduct, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProduct", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockBasketServiceClientMockRecorder) DeleteProduct(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockBasketServiceClient)(nil).DeleteProduct), varargs...)
}

// DropBasket mocks base method.
func (m *MockBasketServiceClient) DropBasket(ctx context.Context, in *basket.UserID, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropBasket", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropBasket indicates an expected call of DropBasket.
func (mr *MockBasketServiceClientMockRecorder) DropBasket(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropBasket", reflect.TypeOf((*MockBasketServiceClient)(nil).DropBasket), varargs...)
}

// GetBasket mocks base method.
func (m *MockBasketServiceClient) GetBasket(ctx context.Context, in *basket.UserID, opts ...grpc.CallOption) (*basket.ProductArray, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBasket", varargs...)
	ret0, _ := ret[0].(*basket.ProductArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasket indicates an expected call of GetBasket.
func (mr *MockBasketServiceClientMockRecorder) GetBasket(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasket", reflect.TypeOf((*MockBasketServiceClient)(nil).GetBasket), varargs...)
}

// PutInBasket mocks base method.
func (m *MockBasketServiceClient) PutInBasket(ctx context.Context, in *basket.BasketProduct, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutInBasket", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutInBasket indicates an expected call of PutInBasket.
func (mr *MockBasketServiceClientMockRecorder) PutInBasket(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutInBasket", reflect.TypeOf((*MockBasketServiceClient)(nil).PutInBasket), varargs...)
}
