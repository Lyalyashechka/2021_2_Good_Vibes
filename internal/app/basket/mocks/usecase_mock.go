// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_basket is a generated GoMock package.
package mock_basket

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_2_Good_Vibes/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// DeleteProduct mocks base method.
func (m *MockUseCase) DeleteProduct(product models.BasketProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockUseCaseMockRecorder) DeleteProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockUseCase)(nil).DeleteProduct), product)
}

// DropBasket mocks base method.
func (m *MockUseCase) DropBasket(userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropBasket", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropBasket indicates an expected call of DropBasket.
func (mr *MockUseCaseMockRecorder) DropBasket(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropBasket", reflect.TypeOf((*MockUseCase)(nil).DropBasket), userId)
}

// GetBasket mocks base method.
func (m *MockUseCase) GetBasket(userId int) ([]models.BasketProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasket", userId)
	ret0, _ := ret[0].([]models.BasketProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasket indicates an expected call of GetBasket.
func (mr *MockUseCaseMockRecorder) GetBasket(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasket", reflect.TypeOf((*MockUseCase)(nil).GetBasket), userId)
}

// PutInBasket mocks base method.
func (m *MockUseCase) PutInBasket(basket models.BasketProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutInBasket", basket)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutInBasket indicates an expected call of PutInBasket.
func (mr *MockUseCaseMockRecorder) PutInBasket(basket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutInBasket", reflect.TypeOf((*MockUseCase)(nil).PutInBasket), basket)
}
