// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_product is a generated GoMock package.
package mock_product

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_2_Good_Vibes/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockUseCase) AddProduct(prod models.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", prod)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockUseCaseMockRecorder) AddProduct(prod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockUseCase)(nil).AddProduct), prod)
}

// GenerateProductImageName mocks base method.
func (m *MockUseCase) GenerateProductImageName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateProductImageName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateProductImageName indicates an expected call of GenerateProductImageName.
func (mr *MockUseCaseMockRecorder) GenerateProductImageName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateProductImageName", reflect.TypeOf((*MockUseCase)(nil).GenerateProductImageName))
}

// GetAllProducts mocks base method.
func (m *MockUseCase) GetAllProducts() ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts")
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockUseCaseMockRecorder) GetAllProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockUseCase)(nil).GetAllProducts))
}

// GetProductById mocks base method.
func (m *MockUseCase) GetProductById(id int) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", id)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockUseCaseMockRecorder) GetProductById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockUseCase)(nil).GetProductById), id)
}

// SaveProductImageName mocks base method.
func (m *MockUseCase) SaveProductImageName(productId int, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProductImageName", productId, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProductImageName indicates an expected call of SaveProductImageName.
func (mr *MockUseCaseMockRecorder) SaveProductImageName(productId, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProductImageName", reflect.TypeOf((*MockUseCase)(nil).SaveProductImageName), productId, fileName)
}
